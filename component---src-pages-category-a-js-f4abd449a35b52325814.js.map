{"version":3,"file":"component---src-pages-category-a-js-f4abd449a35b52325814.js","mappings":"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","sources":["webpack://test-conducir-buenos-aires/./src/components/Container.js","webpack://test-conducir-buenos-aires/./src/components/QuestionText.js","webpack://test-conducir-buenos-aires/./src/components/SelectLanguage.js","webpack://test-conducir-buenos-aires/./src/components/Stat.js","webpack://test-conducir-buenos-aires/./src/components/Header.js","webpack://test-conducir-buenos-aires/./src/components/Answers.js","webpack://test-conducir-buenos-aires/./src/components/ControlButtons.js","webpack://test-conducir-buenos-aires/./src/components/Test.js","webpack://test-conducir-buenos-aires/./src/pages/category-a.js"],"sourcesContent":["import * as React from \"react\"\n\nconst Container = ({children}) => {\n    return (\n        <div className=\"w-full p-4\">\n            <main role=\"main\" className=\"w-full flex flex-col content-center justify-center\">\n                <div className=\"w-full sm:w-1/2 lg:w-1/3 bg-gray-50 rounded-xl m-auto\">\n                    <div className=\"bg-white rounded shadow px-4 pt-5 pb-4 sm:p-6 sm:pb-4\">\n                        {children}\n                    </div>\n                </div>\n            </main>\n        </div>\n    )\n}\n\nexport default Container\n","import * as React from \"react\"\nimport {getTranslation} from \"../questions/translations\";\n\nconst QuestionText = ({question, language}) => {\n    const isLanguageSelected = language !== \"0\";\n\n    return (\n        <>\n            <p className=\"text-xl mb-2\">{question.text}</p>\n            {\n                isLanguageSelected ?\n                    <p className=\"text-sm text-gray-600 mb-2\">{getTranslation(question.text)}</p>\n                    : isLanguageSelected && <p className=\"text-sm text-red-600 mb-2\">нет перевода</p>\n            }\n            {\n                question.img ?\n                    <img className=\"mt-6 rounded-sm\" src={question.img} alt={question.text}/>\n                    : null\n            }\n        </>\n    )\n}\n\nexport default QuestionText\n","import * as React from 'react';\n\nconst SelectLanguage = ({language, onChange}) => {\n    return (\n        <div>\n            <label htmlFor=\"underline_select\" className=\"sr-only\">Underline select</label>\n            <select id=\"underline_select\"\n                    defaultValue={language}\n                    onChange={(e) => onChange(e.target.value)}\n                    style={{textAlignLast: 'right'}}\n                    className=\"block w-full text-sm text-gray-500 focus:outline-none\">\n                <option value=\"0\">Без перевода (выбор языка)</option>\n                <option value=\"ru\">Русский</option>\n            </select>\n        </div>\n    );\n};\n\nexport default SelectLanguage;\n","import * as React from 'react';\n\nconst Stat = ({stat}) => {\n    return (\n        <>\n            <div className=\"text-xs\">\n                вопросов: {stat.total},\n                выучено*: {stat.total - stat.queued}\n            </div>\n            <div className=\"text-xs\">\n                <small>\n                    *количество вопросов, на которые вы ответили правильно 3 раза подряд\n                </small>\n            </div>\n        </>\n    );\n};\n\nexport default Stat;\n","import * as React from \"react\";\nimport SelectLanguage from \"./SelectLanguage\";\nimport Stat from \"./Stat\";\n\nconst Header = ({number, language, onUpdateLang, stat}) => {\n    return (\n        <div className=\"mb-8\">\n            <div className=\"flex flex-row items-center justify-between\">\n                <h3 className=\"text-sm\">Вопрос {number}</h3>\n                <SelectLanguage language={language}\n                                onChange={onUpdateLang}/>\n            </div>\n            <div>\n                <Stat stat={stat}/>\n            </div>\n        </div>\n    );\n}\n\nexport default Header;\n","import * as React from \"react\";\nimport {getTranslation} from \"../questions/translations\";\n\nconst Answers = ({responses, language, isAnswered, selected, onSelect}) => {\n    return (\n        <ul className=\"mt-6\">\n            {responses.map(\n                (answer, index) => {\n                    let color = \"text-gray-900\";\n                    if (isAnswered) {\n                        if (answer.correct) {\n                            color = \"text-green-700\";\n                        }\n                    }\n                    const isLanguageSelected = language !== \"0\";\n\n                    return (\n                        <li className=\"mb-4\" key={index}>\n                            <div className=\"flex items-center\">\n                                <input id={`default-radio-${index}`}\n                                       type=\"radio\"\n                                       value=\"\"\n                                       checked={index === selected}\n                                       name=\"default-radio\"\n                                       onChange={() => onSelect(index)}\n                                       className=\"w-4 h-4 focus:ring-0\"/>\n                                <label htmlFor={`default-radio-${index}`}\n                                       className={`ml-3 ms-2 text-sm font-medium ${color}`}>{answer.text}</label>\n                            </div>\n                            {\n                                isLanguageSelected ?\n                                    <p className=\"text-sm mb-6 text-gray-600\">\n                                        {getTranslation(answer.text)}\n                                    </p>\n                                    : (isLanguageSelected && <p className=\"text-sm mb-6 text-red-600\">нет перевода</p>)\n                            }\n                        </li>\n                    );\n                })\n            }\n        </ul>\n    );\n}\n\nexport default Answers;\n","import * as React from \"react\";\n\nconst ControlButtons = ({isAnswered, selected, onAnswer, onNext}) => {\n    const Container = ({children}) => {\n        return (\n            <div className=\"flex flex-row justify-center mt-10\">\n                {children}\n            </div>\n        );\n    }\n\n    if (isAnswered) {\n        return (\n            <Container>\n                <button\n                    onClick={() => onNext()}\n                    className=\"bg-gray-100 hover:bg-gray-200 text-black font-bold py-2 px-4 rounded\">\n                    Следующий вопрос\n                </button>\n            </Container>\n        );\n    }\n\n    let colors = 'bg-green-700 hover:bg-green-800 text-white';\n    let text = 'Проверить ответ';\n    if (selected === null) {\n        colors = 'bg-gray-300 hover:bg-gray-400 text-black';\n        text = 'Выберите ответ';\n    }\n\n    return (\n        <Container>\n            <button\n                onClick={() => onAnswer()}\n                disabled={selected === null}\n                className={`${colors} font-bold py-2 px-4 rounded`}>\n                {text}\n            </button>\n        </Container>\n    );\n}\n\nexport default ControlButtons;\n","import * as React from \"react\"\nimport QuestionText from \"./QuestionText\";\nimport Header from \"./Header\";\nimport Answers from \"./Answers\";\nimport ControlButtons from \"./ControlButtons\";\n\nconst Test = ({questions, postfix}) => {\n\n    const shuffleArray = (array) => {\n        return array\n            .map(value => ({value, sort: Math.random()}))\n            .sort((a, b) => a.sort - b.sort)\n            .map(({value}) => value)\n    }\n\n    const getInitialState = () => {\n        return {\n            index: 0,\n            language: \"0\",\n            selectedAnswer: null,\n            isAnswered: false,\n            stat: {\n                questions: {},\n                total: questions.length,\n            },\n            queue: shuffleArray(Object.keys(questions)),\n        };\n    }\n\n    let initialState = typeof window !== 'undefined' && localStorage.getItem(`state${postfix}`);\n    if (!initialState) {\n        initialState = getInitialState();\n    } else {\n        initialState = JSON.parse(initialState);\n    }\n\n    const [state, _setState] = React.useState(initialState);\n\n    const updateState = (newState) => {\n        const newStateMerged = {\n            ...state,\n            ...newState\n        };\n\n        typeof window !== 'undefined' && localStorage.setItem(`state${postfix}`, JSON.stringify(newStateMerged));\n        _setState(newStateMerged);\n    }\n\n    if (!state.queue.length) {\n        return (\n            <>\n                <div className=\"mb-5\">Ты все выучил, поздравляю!</div>\n                <button\n                    onClick={() => updateState(getInitialState())}\n                    className=\"bg-gray-100 hover:bg-gray-200 text-black font-bold py-2 px-4 rounded mb-5\">\n                    Сбросить\n                </button>\n            </>\n        );\n    }\n\n    const question = questions[state.index];\n\n    return (\n        <>\n\n            <Header number={Number(state.index) + 1}\n                    language={state.language}\n                    onUpdateLang={(value) => updateState({language: value})}\n                    stat={{...state.stat, queued: state.queue.length}}\n            />\n            <QuestionText question={question}\n                          language={state.language}/>\n\n            <Answers responses={question.responses}\n                     language={state.language}\n                     isAnswered={state.isAnswered}\n                     selected={state.selectedAnswer}\n                     onSelect={(i) => !state.isAnswered && updateState({selectedAnswer: i})}/>\n\n            <ControlButtons isAnswered={state.isAnswered}\n                            selected={state.selectedAnswer}\n                            onAnswer={() => {\n                                let stat = {...state.stat};\n                                let queue = [...state.queue];\n                                if (!stat.questions[state.index]) {\n                                    stat.questions[state.index] = 0;\n                                }\n\n                                if (question.responses[state.selectedAnswer].correct) {\n                                    stat.questions[state.index]++;\n                                } else {\n                                    stat.questions[state.index] = 0;\n                                }\n\n                                if (stat.questions[state.index] > 3) {\n                                    delete stat.questions[state.index];\n                                    queue.splice(queue.indexOf(String(state.index)), 1);\n                                }\n\n                                updateState({\n                                    isAnswered: true,\n                                    stat: stat,\n                                    queue: queue,\n                                });\n                            }}\n\n                            onNext={() => {\n                                const index = state.queue.length ? state.queue[Math.floor(Math.random() * state.queue.length)] : null;\n                                updateState({\n                                    index: index,\n                                    selectedAnswer: null,\n                                    isAnswered: false,\n                                });\n                            }}/>\n        </>\n    )\n}\n\nexport default Test\n","import * as React from \"react\"\nimport {getQuestions} from \"../questions/category-a\";\nimport Test from \"../components/Test\";\nimport Container from \"../components/Container\";\n\nconst CategoryAPage = () => {\n    const questions = getQuestions();\n    return <>\n        <Container>\n            <div>\n                <h1>Test Conducir Buenos Aires, Category A</h1>\n                <a className=\"text-blue-600 underline dark:text-blue-500\" href=\"/\">Category B</a>\n            </div>\n            <br/>\n            <Test questions={questions} postfix=\"_cat_a\"></Test>\n        </Container>\n    </>;\n}\n\nexport default CategoryAPage\n\nexport const Head = () => <title>Test Conducir Buenos Aires, Category A</title>\n"],"names":["children","className","role","question","language","isLanguageSelected","text","getTranslation","img","src","alt","onChange","htmlFor","id","defaultValue","e","target","value","style","textAlignLast","stat","total","queued","number","onUpdateLang","responses","isAnswered","selected","onSelect","map","answer","index","color","correct","key","type","checked","name","onAnswer","onNext","Container","onClick","colors","disabled","questions","postfix","getInitialState","selectedAnswer","length","queue","array","Object","keys","sort","Math","random","a","b","initialState","window","localStorage","getItem","JSON","parse","state","_setState","React","updateState","newState","newStateMerged","setItem","stringify","Number","i","splice","indexOf","String","floor","getQuestions","href","Head"],"sourceRoot":""}